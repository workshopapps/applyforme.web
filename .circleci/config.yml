version: 2.1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd Apply-For-Me-UI
            rm package-lock.json
            npm install
            npm run build
      - save_cache:
          paths: [Apply-For-Me-UI/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: cimg/openjdk:19.0.1
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build back-end
          command: |
            cd Apply-For-Me-Api
            mvn install
            cp target/Apply-For-Me-0.0.1-SNAPSHOT.jar Apply-For-Me-Api.jar

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-client]
      # Your job code here
      - run:
          name: Test Frontend
          command: |
            cd Apply-For-Me-UI
            npm install
            npm run test

  build-frontend-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout

      - setup_remote_docker

      - run:
          name: Build application Docker image
          command: |
            cd Apply-For-Me-UI/
            docker build -t app .

      - run:
          name: Push Image to docker hub
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            docker tag app hacklight/apply-frontend
            docker push hacklight/apply-frontend

  build-backend-docker-image:
    docker:
      # Docker image that supports docker
      - image: docker:17.05.0-ce-git
    steps:
      # Checkout code from git
      - checkout

      - setup_remote_docker

      - run:
          name: Build application Docker image
          command: |
            cd Apply-For-Me-Api
            docker build -t app-be .

      - run:
          name: Push Image to docker hub
          command: |
            docker login -u ${DOCKER_USERNAME} -p ${DOCKER_PASSWORD}
            docker tag app-be hacklight/apply-backend
            docker push hacklight/apply-backend

  deploy-frontend-images-using-ssh:
    docker:
      # Docker image that supports docker
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["aa:5b:cc:fe:a8:94:db:ee:9d:7c:0a:81:6f:14:96:54"]
      - run:
          name: Deploy
          command: |

            # SSH to the server to deploy
            EC2_USERNAME=ubuntu

            EC2_PUBLIC_DNS=54.175.202.121
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS "/home/ubuntu/run.sh"

  deploy-backend-images-using-ssh:
    docker:
      # Docker image that supports docker
      - image: circleci/openjdk:8-jdk
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["aa:5b:cc:fe:a8:94:db:ee:9d:7c:0a:81:6f:14:96:54"]
      - run:
          name: Deploy
          command: |

            # SSH to the server to deploy
            EC2_USERNAME=ubuntu

            EC2_PUBLIC_DNS=
            ssh -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_PUBLIC_DNS "/home/ubuntu/run.sh"

workflows:
  default:
    # testing
    jobs:
      - build-frontend
      # - build-frontend-admin
      - build-backend
      # - test-frontend
      - build-frontend-docker-image:
          requires: [build-frontend] #remember to channge to test
          filters:
            branches:
              only: [devops]

      # - build-backend-docker-image:
      #     requires: [build-backend] #remember to channge to test
      #     filters:
      #       branches:
      #         only: [devops]

      - deploy-frontend-images-using-ssh:
          requires: [build-frontend-docker-image]

      # - deploy-backend-images-using-ssh:
      #     requires: [build-backend-docker-image]
